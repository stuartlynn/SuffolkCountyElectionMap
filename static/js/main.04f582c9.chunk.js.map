{"version":3,"sources":["Store.js","Components/Map.js","Components/ResultsChart.js","Components/Stats.js","Components/LayerPicker.js","serviceWorker.js","index.js","App.js"],"names":["initalState","electionResults","candidates","selectedCandidate","hoverFeature","selectedRegion","basemap","showWinner","reducer","state","action","type","payload","Object","objectSpread","shoWinner","Store","React","createContext","MapContainer","props","_useContext","useContext","dispatch","satLayer","useRef","osmLayer","electionSource","electionLayer","map","mapDiv","styleFunction","interpolatePurples","candidate","feature","voteFrac","getProperties","Style","stroke","Stroke","color","width","fill","Fill","useEffect","current","setStyle","VectorSource","features","GeoJSON","readFeatures","dataProjection","featureProjection","VectorLayer","source","style","visible","addLayer","console","log","setVisible","TileLayer","name","BingMaps","key","imagerySet","OSM","Map","target","layers","view","View","center","fromLonLat","zoom","on","evt","forEachFeatureAtPixel","pixel","properties","region","district_no","window","addEventListener","setTimeout","updateSize","react_default","a","createElement","className","id","ref","el","height","ResultChart","bars","data","filter","d","includes","entry","y","x","sort","b","length","toFixed","es","yType","margin","left","Stats","Fragment","entries","find","er","LayerPicker","onClick","fontWeight","c","Boolean","location","hostname","match","ReactDOM","render","_ref","children","_useReducer","useReducer","_useReducer2","slicedToArray","value","localStorage","getItem","Provider","fetch","then","r","json","result","keys","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mWAEMA,EAAc,CAClBC,gBAAiB,KACjBC,WAAY,KACZC,kBAAmB,KACnBC,aAAc,KACdC,eAAgB,KAChBC,QAAS,WACTC,YAAY,GAGRC,EAAU,SAACC,EAAOC,GAAW,IAC1BC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,QACb,OAAQD,GACN,IAAK,oBACH,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GACFJ,EADL,CAEEP,WAAYU,IAEhB,IAAK,kBACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFJ,EADL,CAEER,gBAAiBW,IAErB,IAAK,mBACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFJ,EADL,CAEEN,kBAAmBS,EACnBG,WAAW,IAEf,IAAK,iBACH,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GACFJ,EADL,CAEEH,QAASM,IAEb,IAAK,sBACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFJ,EADL,CAEEJ,eAAgBO,IAEpB,IAAK,cACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFJ,EADL,CAEEF,YAAY,IAEhB,IAAK,gBACH,OAAOM,OAAAC,EAAA,EAAAD,CAAA,GAAIJ,EAAUG,GACvB,QACE,OAAOH,IAIAO,EAAQC,IAAMC,yBC5BZ,SAASC,EAAaC,GAAO,IAAAC,EAChBC,qBAAWN,GAA9BP,EADmCY,EACnCZ,MAAOc,EAD4BF,EAC5BE,SACPtB,EAA2DQ,EAA3DR,gBAAiBE,EAA0CM,EAA1CN,kBAAmBG,EAAuBG,EAAvBH,QAErCkB,GAF4Df,EAAdF,WAEnCkB,iBAAO,OAClBC,EAAWD,iBAAO,MAClBE,EAAgBF,iBAAO,MACvBG,EAAgBH,iBAAO,MAGvBI,EAAMJ,iBAAO,MACbK,EAASL,iBAAO,MAyChBM,GAvCoBN,iBAAOO,KAuCX,SAACC,GAAD,OAAe,SAACC,GACpC,IACMC,EADcD,EAAQE,gBACCjC,GAC7B,OAAO,IAAIkC,IAAM,CACbC,OAAQ,IAAIC,IAAO,CACfC,MAAM,OACNC,MAAO,KAEXC,KAAM,IAAIC,IAAK,CACXH,MAAiB,GAAVL,EAAc,kBAAoBH,YAAmB,EAAEG,UAuDxE,OAlDAS,oBAAW,WACNhB,EAAciB,SACbjB,EAAciB,QAAQC,SAASf,MAElC,CAAC5B,IAEJyC,oBAAU,WACL3C,IACC0B,EAAekB,QAAU,IAAIE,IAAa,CACtCC,UAAU,IAAIC,KAAWC,aAAajD,EAAiB,CACnDkD,eAAgB,YAChBC,kBAAmB,gBAY3BxB,EAAciB,QAAU,IAAIQ,IAAY,CACpCC,OAAQ3B,EAAekB,QACvBU,MAAOxB,IACPyB,SAAQ,IAGZ3B,EAAIgB,QAAQY,SAAS7B,EAAciB,WAEvC,CAAC5C,IAEH2C,oBAAU,WACRc,QAAQC,IAAI,oBAAqBrD,GAC9BkB,EAASqB,SAAWnB,EAASmB,UAC5BrB,EAASqB,QAAQe,WAAoB,YAATtD,GAC5BoB,EAASmB,QAAQe,WAAoB,YAATtD,KAEhC,CAACA,IAEHsC,oBAAU,WA3FRpB,EAASqB,QAAU,IAAIgB,IAAU,CAC/BL,SAAS,EACTM,KAAM,YACNR,OAAQ,IAAIS,IAAS,CACnBC,IAAK,mEACLC,WAAY,aAIhBvC,EAASmB,QAAU,IAAIgB,IAAU,CAC/BL,SAAS,EACTM,KAAM,MACNR,OAAQ,IAAIY,MAGdrC,EAAIgB,QAAU,IAAIsB,IAAI,CACpBC,OAAQtC,EAAOe,QACfwB,OAAQ,CAAC7C,EAASqB,QAASnB,EAASmB,SACpCyB,KAAM,IAAIC,IAAK,CACbC,OAAQC,YAAW,EAAE,UAAW,YAChCC,KAAM,OAIV7C,EAAIgB,QAAQ8B,GAAG,QAAQ,SAACC,GACpB/C,EAAIgB,QAAQgC,sBAAsBD,EAAIE,MAAO,SAAC5C,GAC1C,IAAM6C,EAAa7C,EAAQE,gBAC3BsB,QAAQC,IAAI,oBAAqBzB,EAAS6C,GAC1CxD,EAAS,CACLZ,KAAM,sBACNC,QAAS,CAAEoE,OAAQD,EAAWC,OAAQC,YAAcF,EAAWE,mBA+D3EC,OAAOC,iBAAiB,SAAU,WAChCzB,QAAQC,IAAI,iBACZyB,WAAW,kBAAMvD,EAAIgB,QAAQwC,cAAc,OAE7CD,WAAW,kBAAMvD,EAAIgB,QAAQwC,cAAc,MAC1C,IAGDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,MAAMC,IAAK,SAAAC,GAAE,OAAK9D,EAAOe,QAAU+C,GAC3CrC,MAAO,CAACd,MAAO,OAAQoD,OAAQ,uBCpIxB,SAASC,EAAY1E,GAClC,IACM2E,EADO3E,EAAM4E,KAAKC,OAAO,SAAAC,GAAC,OAAK,CAAC,OAAO,cAAc,UAAUC,SAASD,EAAE,MAC9DrE,IAAI,SAAAuE,GAAK,MAAK,CAACC,EAAGD,EAAM,GAAIE,EAAY,IAATF,EAAM,MAAUG,KAAK,SAAChB,EAAEiB,GACvE,OAAGjB,EAAEe,EAAGE,EAAEF,EAAU,EACjBf,EAAEe,EAAEE,EAAEF,GAAW,EACb,IAIT,OADA5C,QAAQC,IAAIoC,GAEVT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,UAAKO,EAAKA,EAAKU,OAAO,GAAGJ,EAAzB,aAAsCN,EAAKA,EAAKU,OAAO,GAAGH,EAAEI,QAAQ,GAApE,iBACApB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQC,MAAM,UAAUnE,MAAO,IAAKoD,OAAQ,IAAKgB,OAAQ,CAACC,KAAM,MAC9DxB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,MACArB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,MACArB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACEX,KAAMD,MCvBH,SAASgB,EAAM3F,GAAO,IAAAC,EACTC,qBAAWN,GAA9BP,EAD4BY,EAC5BZ,MACAJ,GAF4BgB,EACrBE,SAC+Cd,EAAtDJ,gBAAgBF,EAAsCM,EAAtCN,kBAAmBF,EAAmBQ,EAAnBR,gBAmB1C,OACEqF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAKrF,EAAL,MAGFmF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZpF,GACCiF,EAAAC,EAAAC,cAACF,EAAAC,EAAMyB,SAAP,KACE1B,EAAAC,EAAAC,cAAA,UACGnF,EAAe2E,OADlB,MAC6B3E,EAAe4E,aAE5CK,EAAAC,EAAAC,cAACM,EAAD,CAAcE,KAAMnF,OAAOoG,QA5BnChH,EAAgB+C,SAASkE,KACvB,SAAAC,GAAE,OACAA,EAAGpC,WAAWC,QAAU3E,EAAe2E,QACvCmC,EAAGpC,WAAWE,aAAe5E,EAAe4E,cAC9CF,iBCXS,SAASqC,EAAYhG,GAAO,IAAAC,EACfC,qBAAWN,GAA9BP,EADkCY,EAClCZ,MAAOc,EAD2BF,EAC3BE,SACPrB,EAAyCO,EAAzCP,WAAYC,EAA6BM,EAA7BN,kBAAkBG,EAAWG,EAAXH,QAErC,OADAoD,QAAQC,IAAI,SAAUlD,EAAO,eAAgBP,GAE3CoF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MACE6B,QAAS,kBACP9F,EAAS,CAACZ,KAAM,iBAAkBC,QAAS,cAE7C2C,MAAgB,YAATjD,EAAsB,CAACgH,WAAa,QAAS,IAJtD,YAQAhC,EAAAC,EAAAC,cAAA,MACE6B,QAAS,kBACP9F,EAAS,CAACZ,KAAM,iBAAkBC,QAAS,aAE7C2C,MAAgB,WAATjD,EAAqB,CAACgH,WAAa,QAAS,IAJrD,YASFhC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,WACDtF,GACCoF,EAAAC,EAAAC,cAAA,UACGtF,EAAW2B,IAAI,SAAA0F,GAAC,OACfjC,EAAAC,EAAAC,cAAA,MACE6B,QAAS,kBAAM9F,EAAS,CAACZ,KAAM,mBAAoBC,QAAS2G,KAC5DvD,IAAKuD,EACLhE,MAAOgE,GAAKpH,EAAoB,CAACmH,WAAY,QAAU,IACtDC,MAKPjC,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAI6B,QAAS,kBAAI9F,EAAS,CAACZ,KAAM,oBAAjC,mBCnCQ6G,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACPvC,EAAAC,EAAAC,cN+C2B,SAAAsC,GAAgB,IAAdC,EAAcD,EAAdC,SAAcC,EACjBC,qBAAWzH,EAASR,GADHkI,EAAArH,OAAAsH,EAAA,EAAAtH,CAAAmH,EAAA,GACpCvH,EADoCyH,EAAA,GAErCE,EAAQ,CAAC3H,QAAOc,SAFqB2G,EAAA,IAkB3C,OAdAtF,oBAAU,WACSyF,aAAaC,QAAQ,UAOrC,IAEH1F,oBAAU,aAEP,CAACnC,IAEG6E,EAAAC,EAAAC,cAACxE,EAAMuH,SAAP,CAAgBH,MAAOA,GAAQL,IMjEtC,KACEzC,EAAAC,EAAAC,cCFW,SAAapE,GAAO,IAAAC,EACPC,qBAAWN,GAAvBO,GADmBF,EAC1BZ,MAD0BY,EACnBE,UAad,OAZAqB,oBAAU,WACR4F,MAAM,qCAAqCC,KAAK,SAAAC,GAAC,OAAEA,EAAEC,SAAQF,KAAK,SAACG,GAC/DrH,EAAS,CACLZ,KAAK,kBACLC,QAASgI,IAEbrH,EAAS,CACLZ,KAAK,oBACLC,QAASC,OAAOgI,KAAKD,EAAO5F,SAAS,GAAG+B,YAAYkB,OAAO,SAAAV,GAAC,OAAI,CAAC,OAAO,SAAS,eAAeY,SAASZ,UAGjH,IAEAD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACrE,EAAD,MACAmE,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAAC4B,EAAD,QDhBF,OAEF0B,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMT,KAAK,SAAAU,GACjCA,EAAaC","file":"static/js/main.04f582c9.chunk.js","sourcesContent":["import React, {useStore, useReducer, useEffect, createContext} from 'react';\n\nconst initalState = {\n  electionResults: null,\n  candidates: null,\n  selectedCandidate: null,\n  hoverFeature: null,\n  selectedRegion: null,\n  basemap: 'satelite',\n  showWinner: true,\n};\n\nconst reducer = (state, action) => {\n  const {type, payload} = action;\n  switch (type) {\n    case 'UPDATE_CANDIDATES':\n      return {\n        ...state,\n        candidates: payload,\n      };\n    case 'UPDATE_FEATURES':\n      return {\n        ...state,\n        electionResults: payload,\n      };\n    case 'SELECT_CANDIDATE':\n      return {\n        ...state,\n        selectedCandidate: payload,\n        shoWinner: false,\n      };\n    case 'SELECT_BASEMAP':\n      return {\n        ...state,\n        basemap: payload,\n      };\n    case 'SET_SELECTED_REGION':\n      return {\n        ...state,\n        selectedRegion: payload,\n      };\n    case 'SHOW_WINNER':\n      return {\n        ...state,\n        showWinner: true,\n      };\n    case 'RESTORE_STATE':\n      return {...state, ...payload};\n    default:\n      return state;\n  }\n};\n\nexport const Store = React.createContext();\n\nexport const StoreProvider = ({children}) => {\n  const [state, dispatch] = useReducer(reducer, initalState);\n  const value = {state, dispatch};\n\n  useEffect(() => {\n    const oldState = localStorage.getItem('store');\n    if (oldState) {\n      //dispatch({\n      //type: 'RESTORE_STATE',\n      //payload: JSON.parse(oldState),\n      //});\n    }\n  }, []);\n\n  useEffect(() => {\n    //localStorage.setItem('store', JSON.stringify(state));\n  }, [state]);\n\n  return <Store.Provider value={value}>{children}</Store.Provider>;\n};\n","import React, {Component, useContext, useEffect, useRef} from 'react';\n\nimport 'ol/ol.css';\nimport * as extent from 'ol/extent';\nimport * as proj from 'ol/proj';\nimport {Map, View} from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport BingMaps from 'ol/source/BingMaps.js';\nimport MVT from 'ol/format/MVT.js';\nimport Draw from 'ol/interaction/Draw.js';\nimport Select from 'ol/interaction/Select.js';\nimport Condition from 'ol/events/condition.js';\nimport GeoJSON from 'ol/format/GeoJSON.js';\nimport Overlay from 'ol/Overlay.js';\nimport VectorLayer from 'ol/layer/Vector.js';\nimport VectorSource from 'ol/source/Vector.js';\nimport VectorTileLayer from 'ol/layer/VectorTile.js';\nimport VectorTileSource from 'ol/source/VectorTile.js';\nimport {Fill, Stroke, Style} from 'ol/style.js';\nimport {fromLonLat} from 'ol/proj';\nimport TopoJSON from 'ol/format/TopoJSON.js';\nimport {Store} from '../Store';\nimport {scaleOrdinal,schemeBlues,interpolatePurples} from 'd3'\n\nexport default function MapContainer(props) {\n  const {state, dispatch} = useContext(Store);\n  const {electionResults, selectedCandidate, basemap, showWinner} = state\n\n  const satLayer = useRef(null);\n  const osmLayer = useRef(null);\n  const electionSource= useRef(null);\n  const electionLayer = useRef(null);\n\n\n  const map = useRef(null);\n  const mapDiv = useRef(null);\n\n  const voteFractionScale = useRef(interpolatePurples);\n\n  const setupMap = () => {\n    satLayer.current = new TileLayer({\n      visible: true,\n      name: 'satellite',\n      source: new BingMaps({\n        key: 'AgLzlnwMj2gShi2VFvfbzU4z3uuSwE6Fjlp9OakfGJub-c6s9Q4WG3g4nrRQkV6s',\n        imagerySet: 'Aerial',\n      }),\n    });\n\n    osmLayer.current = new TileLayer({\n      visible: false,\n      name: 'osm',\n      source: new OSM(),\n    });\n\n    map.current = new Map({\n      target: mapDiv.current,\n      layers: [satLayer.current, osmLayer.current],\n      view: new View({\n        center: fromLonLat([-73.273175, 40.818746]),\n        zoom: 10,\n      }),\n    });\n\n    map.current.on('click',(evt)=>{\n        map.current.forEachFeatureAtPixel(evt.pixel, (feature)=>{\n            const properties = feature.getProperties()\n            console.log('selected feature ', feature, properties)\n            dispatch({\n                type: 'SET_SELECTED_REGION',\n                payload: { region: properties.region, district_no : properties.district_no}\n            })\n        })\n    })\n  };\n\n  const styleFunction = (candidate) => (feature)=>{\n    const properties  = feature.getProperties()\n    const voteFrac  = properties[selectedCandidate]\n    return new Style({\n        stroke: new Stroke({\n            color:'grey',\n            width: 0.1\n        }),\n        fill: new Fill({\n            color: voteFrac==0 ? 'rgba(0,0,0,0.2)' : interpolatePurples(1-voteFrac),\n        })\n    })\n  }\n\n  useEffect((()=>{\n    if(electionLayer.current){\n        electionLayer.current.setStyle(styleFunction(selectedCandidate))\n    }\n  }),[selectedCandidate])\n\n  useEffect(()=>{\n    if(electionResults ){\n        electionSource.current = new VectorSource({\n            features:(new GeoJSON()).readFeatures(electionResults, {\n                dataProjection: 'EPSG:4326',\n                featureProjection: 'EPSG:3857'\n            })\n        })\n\n        //electionSource.current = new VectorSource({\n            //url:'/suffolk_county_wide_form.topojson',\n            //format: new TopoJSON({\n                //overlaps:false,\n                //layers:['suffolk_county_wide_form']\n            //})\n        //})\n\n        electionLayer.current = new VectorLayer({\n            source: electionSource.current,\n            style: styleFunction(),\n            visible:true\n        });\n\n        map.current.addLayer(electionLayer.current)\n    }\n  },[electionResults])\n\n  useEffect(()=>{\n    console.log(\"updating basemap \", basemap)\n    if(satLayer.current && osmLayer.current){\n        satLayer.current.setVisible(basemap=='satelite')\n        osmLayer.current.setVisible(basemap!='satelite')\n    }\n  },[basemap])\n\n  useEffect(() => {\n    setupMap();\n    window.addEventListener('resize', () => {\n      console.log('resizing map ')\n      setTimeout(() => map.current.updateSize(), 200);\n    });\n    setTimeout(() => map.current.updateSize(), 200);\n  }, []);\n\n  return (\n    <div className=\"Map\">\n        <div id=\"map\" ref={el => (mapDiv.current = el)}\n        style={{width: '100%', height: '100%'}}\n        />\n    </div>\n  );\n}\n","import React from 'react';\n\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n  HorizontalBarSeries,\n  VerticalBarSeries,\n} from 'react-vis';\n\nexport default function ResultChart(props) {\n  const data = props.data.filter(d => !['Void','district_no','region'].includes(d[0]))\n  const bars = data.map(entry => ({y: entry[0], x: entry[1]*100})).sort((a,b)=>{\n    if(a.x> b.x) return 1\n    if(a.x<b.x) return -1\n    return 0\n  })\n\n  console.log(bars)\n  return (\n    <div className='barChart'>\n        <h3>{bars[bars.length-1].y} Won with {bars[bars.length-1].x.toFixed(0)}% of the vote</h3>\n        <XYPlot yType='ordinal' width={300} height={200} margin={{left: 150}}>\n          <XAxis />\n          <YAxis />\n          <HorizontalBarSeries\n            data={bars}\n          />\n        </XYPlot>\n    </div>\n  );\n}\n","import React, {Component, useContext, useEffect, useRef} from 'react';\nimport ResultsChart from './ResultsChart'\n\nimport {Store} from '../Store';\n\nexport default function Stats(props) {\n  const {state, dispatch} = useContext(Store);\n  const {selectedRegion, selectedCandidate, electionResults} = state;\n    \n  const getSelectedStats = () =>\n    electionResults.features.find(\n      er =>\n        er.properties.region == selectedRegion.region &&\n        er.properties.district_no == selectedRegion.district_no,\n    ).properties;\n\n\n  const renderResults = (stats)=>(\n    <ul>\n        {Object.entries(stats).map((entry)=>(\n            !['Void','district_no','region'].includes(entry[0]) &&\n                <li>{entry[0]} : {(100*entry[1]).toFixed(2)} %</li>\n        ))}\n    </ul>\n    )\n\n  return (\n    <div className=\"Stats\">\n      <div className=\"Candidate\">\n        <h1>{selectedCandidate} </h1>\n      </div>\n\n      <div className=\"Region\">\n        {selectedRegion && (\n          <React.Fragment>\n            <h1>\n              {selectedRegion.region} : {selectedRegion.district_no}\n            </h1>\n            <ResultsChart data={Object.entries(getSelectedStats())} />\n            </React.Fragment>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, {useContext} from 'react';\nimport {Store} from '../Store';\n\nexport default function LayerPicker(props) {\n  const {state, dispatch} = useContext(Store);\n  const {candidates, selectedCandidate,basemap} = state;\n  console.log('state ', state, ' candidates ', candidates);\n  return (\n    <div className=\"LayerPicker\">\n        <p>Basemap</p>\n        <hr />\n      <ul>\n        <li\n          onClick={() =>\n            dispatch({type: 'SELECT_BASEMAP', payload: 'satelite'})\n          }\n          style={basemap=='satelite' ? {fontWeight : 'bold'}: {}}\n        >\n          Satelite\n        </li>\n        <li\n          onClick={() =>\n            dispatch({type: 'SELECT_BASEMAP', payload: 'streets'})\n          }\n          style={basemap=='streets' ? {fontWeight : 'bold'}: {}}\n        >\n          Streets\n        </li>\n      </ul>\n      <br />\n        <p>Candidates</p>\n        <hr />\n      {candidates && (\n        <ul>\n          {candidates.map(c => (\n            <li\n              onClick={() => dispatch({type: 'SELECT_CANDIDATE', payload: c})}\n              key={c}\n              style={c == selectedCandidate ? {fontWeight: 'bold'} : {}}>\n              {c}\n            </li>\n          ))}\n        </ul>\n      )}\n        <p>Other</p>\n        <hr />\n        <ul>\n            <li onClick={()=>dispatch({type: 'SELECT_WINNER'})}>Winner</li>\n        </ul>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {StoreProvider} from './Store';\n\nReactDOM.render(\n  <StoreProvider>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {Component, useContext, useEffect} from 'react';\nimport Map from './Components/Map';\nimport Stats from './Components/Stats';\nimport LayerPicker from './Components/LayerPicker';\nimport {Store} from './Store';\nimport './App.css';\n\nexport default function App(props) {\n  const {state, dispatch} = useContext(Store);\n  useEffect(()=>{\n    fetch('/suffolk_county_wide_form.geojson').then(r=>r.json()).then((result)=>{\n        dispatch({\n            type:'UPDATE_FEATURES',\n            payload: result\n        })\n        dispatch({\n            type:\"UPDATE_CANDIDATES\",\n            payload: Object.keys(result.features[0].properties).filter(a=> !['Void','region','district_no'].includes(a))\n        })\n    })\n  },[])\n  return (\n    <div className=\"App\">\n      <Map />\n      <Stats />\n      <LayerPicker />\n    </div>\n  );\n}\n"],"sourceRoot":""}